{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Georgia-Bold;\f4\fnil\fcharset0 Georgia;\f5\fnil\fcharset0 Menlo-Bold;
\f6\fmodern\fcharset0 CourierNewPSMT;\f7\froman\fcharset0 Times-Roman;\f8\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red27\green27\blue27;\red255\green255\blue255;\red239\green239\blue239;
\red0\green0\blue0;\red27\green27\blue27;\red239\green239\blue239;}
{\*\expandedcolortbl;;\cssrgb\c14118\c14118\c14118;\cssrgb\c100000\c100000\c100000;\cssrgb\c94902\c94902\c94902;
\cssrgb\c0\c0\c0;\cssrgb\c14118\c14118\c14118;\cssrgb\c94902\c94902\c94902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh18400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \ul \ulc0 # Prerequisite\ulnone \
\
1. Install AWS CLI or use Cloudshell\
2. Create new user having EC2 and VPC full access\
3. Create Access Keys for user for authorization on CLI\
4. Configure AWS CLI\
\
\
\ul # Building a Kubernetes cluster on AWS from scratch \
\ulnone \
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Installing some client tools we need\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 wget -q --timestamping \\\
  {\field{\*\fldinst{HYPERLINK "https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssl"}}{\fldrslt \cf0 \ul \ulc0 \strokec5 https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssl}} \\\
  {\field{\*\fldinst{HYPERLINK "https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssljson"}}{\fldrslt \cf0 \ul \ulc0 \strokec5 https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/1.4.1/linux/cfssljson}}\cf0 \ul \ulc0 \strokec5 \
\
\cf2 \ulnone \strokec2 wget {\field{\*\fldinst{HYPERLINK "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl"}}{\fldrslt \cf2 \cb4 \ul \ulc2 \strokec2 https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl}}\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2 chmod +x kubectl\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2 sudo mv kubectl /usr/local/bin/\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2 kubectl version --client\cf2 \cb1 \strokec2 \

\f1\b\fs40 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 Provisioning Compute Infrastructure ( VMs : Master Node & Worker Node )\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 \cb3 \strokec2 VPC\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --output text --query 'Vpc.VpcId')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-tags --resources $\{VPC_ID\} --tags Key=Name,Value=kubernetes-from-scratch\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 modify-vpc-attribute --vpc-id $\{VPC_ID\} --enable-dns-support '\{"Value": true\}'\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 modify-vpc-attribute --vpc-id $\{VPC_ID\} --enable-dns-hostnames '\{"Value": true\}'\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Private Subnet\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 SUBNET_ID=$(aws ec2 create-subnet \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --vpc-id $\{VPC_ID\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --cidr-block 10.0.1.0/24 \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --output text --query 'Subnet.SubnetId')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-tags --resources $\{SUBNET_ID\} --tags Key=Name,Value=kubernetes-pvt\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Internet Gateway ( If required )\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 INTERNET_GATEWAY_ID=$(aws ec2 create-internet-gateway --output text --query 'InternetGateway.InternetGatewayId')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-tags --resources $\{INTERNET_GATEWAY_ID\} --tags Key=Name,Value=kubernetes-igw\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 attach-internet-gateway --internet-gateway-id $\{INTERNET_GATEWAY_ID\} --vpc-id $\{VPC_ID\}\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Route Table ( If required )\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $\{VPC_ID\} --output text --query 'RouteTable.RouteTableId')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-tags --resources $\{ROUTE_TABLE_ID\} --tags Key=Name,Value=kubernetes-rt\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 associate-route-table --route-table-id $\{ROUTE_TABLE_ID\} --subnet-id $\{SUBNET_ID\}\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-route --route-table-id $\{ROUTE_TABLE_ID\} --destination-cidr-block 0.0.0.0/0 --gateway-id $\{INTERNET_GATEWAY_ID\}\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Security Group\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 SECURITY_GROUP_ID=$(aws ec2 create-security-group \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --group-name kubernetes-from-scratch \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --description "Kubernetes from scratch - security group" \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --vpc-id $\{VPC_ID\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   --output text --query 'GroupId')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 create-tags --resources $\{SECURITY_GROUP_ID\} --tags Key=Name,Value=kubernetes-sg\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol all --cidr 10.0.0.0/16\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol all --cidr 10.200.0.0/16\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol tcp --port 22 --cidr 0.0.0.0/0\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol tcp --port 6443 --cidr 0.0.0.0/0\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol tcp --port 443 --cidr 0.0.0.0/0\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws ec2 authorize-security-group-ingress --group-id $\{SECURITY_GROUP_ID\} --protocol icmp --port -1 --cidr 0.0.0.0/0\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Network Load Balancer ( If required, you can use other methods also, i.e. NodePort )\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 LOAD_BALANCER_ARN=$(aws elbv2 create-load-balancer \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --name kubernetes-nlb \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --subnets $\{SUBNET_ID\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --scheme internet-facing \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --type network \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --output text --query 'LoadBalancers[].LoadBalancerArn')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 TARGET_GROUP_ARN=$(aws elbv2 create-target-group \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --name kubernetes-tg \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --protocol TCP \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --port 6443 \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --vpc-id $\{VPC_ID\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --target-type ip \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --output text --query 'TargetGroups[].TargetGroupArn')\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws elbv2 register-targets --target-group-arn $\{TARGET_GROUP_ARN\} --targets Id=10.0.1.1\{0,1,2\}\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 aws elbv2 create-listener \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --load-balancer-arn $\{LOAD_BALANCER_ARN\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --protocol TCP \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --port 443 \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --default-actions Type=forward,TargetGroupArn=$\{TARGET_GROUP_ARN\} \\\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     --output text --query 'Listeners[].ListenerArn'\
\
\
\pard\pardeftab720\partightenfactor0

\f4\fs40 \cf2 \cb3 \strokec2 public DNS address of our load balancer :\
\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf2 \cb4 \strokec2 KUBERNETES_PUBLIC_ADDRESS=$(aws elbv2 describe-load-balancers \\\
  --load-balancer-arns $\{LOAD_BALANCER_ARN\} \\\
  --output text --query 'LoadBalancers[].DNSName')\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 Compute Instances\
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb4 \strokec2 IMAGE_ID=$(aws ec2 describe-images --owners 099720109477 \\\
  --output json \\\
  --filters \\\
  'Name=root-device-type,Values=ebs' \\\
  'Name=architecture,Values=x86_64' \\\
  'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*' \\\
  | jq -r '.Images|sort_by(.Name)[-1]|.ImageId')\
\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 # create a key-pair so we can use it to securely connect to our instances
\f4\b0 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf2 \cb4 \strokec2 aws ec2 create-key-pair --key-name kubernetes --output text --query 'KeyMaterial' > kubernetes.id_rsa\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 chmod 600 kubernetes.id_rsa\
\
\
\

\f5\b Kubernetes Controller ( Control plane i.e. Master Nodes )
\f2\b0 \
\
for i in 0 1 2; do\
  instance_id=$(aws ec2 run-instances \\\
    --associate-public-ip-address \\\
    --image-id $\{IMAGE_ID\} \\\
    --count 1 \\\
    --key-name kubernetes \\\
    --security-group-ids $\{SECURITY_GROUP_ID\} \\\
    --instance-type t3.micro \\\
    --private-ip-address 10.0.1.1$\{i\} \\\
    --user-data "name=controller-$\{i\}" \\\
    --subnet-id $\{SUBNET_ID\} \\\
    --block-device-mappings='\{"DeviceName": "/dev/sda1", "Ebs": \{ "VolumeSize": 50 \}, "NoDevice": "" \}' \\\
    --output text --query 'Instances[].InstanceId')\
  aws ec2 modify-instance-attribute --instance-id $\{instance_id\} --no-source-dest-check\
  aws ec2 create-tags --resources $\{instance_id\} --tags "Key=Name,Value=controller-$\{i\}"\
  echo "controller-$\{i\} created "\
done\
\
\
\

\f5\b Worker Nodes\
\

\f2\b0 for i in 0 1 2; do\
  instance_id=$(aws ec2 run-instances \\\
    --associate-public-ip-address \\\
    --image-id $\{IMAGE_ID\} \\\
    --count 1 \\\
    --key-name kubernetes \\\
    --security-group-ids $\{SECURITY_GROUP_ID\} \\\
    --instance-type t3.micro \\\
    --private-ip-address 10.0.1.2$\{i\} \\\
    --user-data "name=worker-$\{i\}|pod-cidr=10.200.$\{i\}.0/24" \\\
    --subnet-id $\{SUBNET_ID\} \\\
    --block-device-mappings='\{"DeviceName": "/dev/sda1", "Ebs": \{ "VolumeSize": 50 \}, "NoDevice": "" \}' \\\
    --output text --query 'Instances[].InstanceId')\
  aws ec2 modify-instance-attribute --instance-id $\{instance_id\} --no-source-dest-check\
  aws ec2 create-tags --resources $\{instance_id\} --tags "Key=Name,Value=worker-$\{i\}"\
  echo "worker-$\{i\} created"\
done\
\
\
# Setting up Kubeadm\
\
=> open 2 terminals one for master other for worker\
\
# Master\
\
ssh -i kubernetes.id_rsa ubuntu@publicip        ( Her public ip is public IPV4 address of ec2 instance of master node)\
\
=> If error comes in above command like permission denied ( public key ) in libcrypto solved by creating a new vpc and subnet and not using default one\
\
sudo -i\
\
apt-get update && apt-get upgrade -y\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \outl0\strokewidth0 apt-get install -y vim\
\
sudo swapoff -a\
\
apt-get install -y docker.io\
\
mkdir -p /etc/apt/keyrings/\
\
\pard\pardeftab720\partightenfactor0

\f6\fs28 \cf0 \cb3 \outl0\strokewidth0 \strokec5 sudo apt-get install -y apt-transport-https ca-certificates curl gpg\
\
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\
\
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\
\
sudo apt-get update\
sudo apt-get install -y kubelet kubeadm kubectl\
sudo apt-mark hold kubelet kubeadm kubectl\
\
# pod network\
wget https://docs.projectcalico.org/manifests/calico.yaml\
cat calico.yaml | grep -A1 CALICO_IPV4POOL_CIDR\
hostname -i\
\
add alias to CP & worker nodes\
vi /etc/hosts\
10.0.1.10 k8scp  => here ip is of control plane\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 \outl0\strokewidth0 10.0.1.20 worker => can give alias for worker ip also\cb3 \outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf0 \
Configure docker to use proper cgroup\
vim /etc/docker/daemon.json\
\{\
"exec-opts": ["native.cgroupdriver=systemd"],\
"log-driver": "json-file",\
"log-opts": \{\
"max-size": "100m"\
\},\
"storage-driver": "overlay2"\
\}\
\
systemctl restart docker ;\
sleep 20 ; systemctl status docker\
\
vim kubeadm-config.yaml\
\
Press <i>\
\
kind: ClusterConfiguration\
apiVersion: kubeadm.k8s.io/v1beta3\
kubernetesVersion: v1.29.1\
controlPlaneEndpoint: "k8scp:6443"\
networking:\
  podSubnet: 192.168.0.0/16\
---\
kind: KubeletConfiguration\
apiVersion: kubelet.config.k8s.io/v1beta1\
cgroupDriver: systemd\
\
Press <esc>\
Press : then wq! to save\
\
// To initialize control plane\
\
kubeadm init --config kubeadm-config.yaml --upload-certs | tee kubeadm-init.out\
\
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf0 \cb3 \outl0\strokewidth0 # Apply network plugin on master node\
\
sudo cp /root/calico.yaml .\
\
// no need to copy if file already exists\
\
kubectl apply -f calico.yaml\
\
// if above command gives error like : connection refused and localhost:8080 \'85\
\
Then apply the below commands on master node\
\
exit  // to exit root\
\
mkdir -p $HOME/ .kube\
\
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\
\
sudo chown $(id -u):$(id -g) $HOME/.kube/config\
\
// now u can use kubectl apply -f calico.yaml command
\fs28 \cb3 \outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf2 \cb4 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
# Worker\
\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \outl0\strokewidth0 ssh -i kubernetes.id_rsa ubuntu@publicip        ( Her public ip is public IPV4 address of ec2 instance of worker node)\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 \outl0\strokewidth0 sudo -i\
\
apt-get update && apt-get upgrade -y\
\
apt-get install -y vim\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb7 sudo swapoff -a\
\
apt-get install -y docker.io\
\
\pard\pardeftab720\partightenfactor0

\f6\fs28 \cf0 \cb3 \outl0\strokewidth0 \strokec5 sudo apt-get update\
sudo apt-get install -y kubelet kubeadm kubectl\
sudo apt-mark hold kubelet kubeadm kubectl\
\
=> installing kubeadm is not required on worker node, it is only for control plane\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf6 \cb7 \outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0

\f6\fs28 \cf0 \cb3 # pod network\
wget https://docs.projectcalico.org/manifests/calico.yaml\
cat calico.yaml | grep -A1 CALICO_IPV4POOL_CIDR\
hostname -i\
\
add alias to CP & worker nodes\
vi /etc/hosts\
10.0.1.10 k8scp  => here ip is of control plane\
10.0.1.20 worker => can give alias for worker ip also\
\
Configure docker to use proper cgroup\
vim /etc/docker/daemon.json\
\{\
"exec-opts": ["native.cgroupdriver=systemd"],\
"log-driver": "json-file",\
"log-opts": \{\
"max-size": "100m"\
\},\
"storage-driver": "overlay2"\
\}\
\
systemctl restart docker ;\
sleep 20 ; systemctl status docker\
\
vim kubeadm-config.yaml\
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 \outl0\strokewidth0 \strokec5 kind: KubeletConfiguration\
apiVersion: kubelet.config.k8s.io/v1beta1\
cgroupDriver: systemd\
\
// To join worker node to cluster\
// you will get this command when you run init on control plane\
\
kubeadm join k8scp:6443 --token 70aidd.innevy6m6uavcvmd --discovery-token-ca-cert-hash sha256:f25f871a92f8a6c703f1012cf1ffa8a15d0e7488a60f858035044132edb1077a\
\
// Here, token and sha256 hash key is your own token and hash key\
// to find out token, type this on control plane terminal\
\
kubedam token list  // the one with authentication, signing system \'85. In usage is your token\
\
// for ssh key\
\
ls /etc/kubernetes/pki/\
\
// there u will get certificate as ca.crt\
// 
\f7\fs36 \cb1 \strokec5 extract the public key from the 
\f8 ca.crt
\f7  certificate file, convert it to DER format, and then calculate its SHA-256 hash using OpenSSL\
\
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed \'92s/^.* //\'91\
\
// This command will give u the sha256 key to be used\
\
\'97\'97\'97\'97
\f6 \cb3 \strokec5 \
\
// Now our K8s cluster is set up and we can use it to deploy our applications, container, and these command will only work on master node as it has kube config file\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
// Now on master node outside of root privileges i.e. ubuntu@ip\'85.\
\

\fs28 kubectl create deployment nginx --image=nginx --port 80\
\
kubectl get deployments\
\
kubectl describe deployment nginx\
\
kubectl get events\
\
kubectl expose deployment nginx --type=LoadBalancer\
\
kubectl get svc nginx\
kubectl get ep nginx\
\
\
\
kubectl get deployment nginx -o yaml\
\
kubectl get deployment nginx -o yaml > first.yaml\
\
vim first.yaml\
Remove the creationTimestamp,\
resourceVersion, and uid lines. Also remove all the lines including and after status:,\
\
kubectl delete deployment nginx\
\
kubectl create -f first.yaml\
\
kubectl create deployment two --image=nginx --dry-run=client -o yaml\
\
kubectl get deployment\
\
kubectl expose deployment/nginx\
kubectl get svc nginx\
kubectl get ep nginx\
\
\
\
kubectl exec nginx-1423793266-13p69 -- printenv |grep KUBERNETES\

\fs36 \
\
// kubectl describe pods <pod name> will show u that although we are executing commands on master node, but container is being deployed on worker node, showing us that, cluster is successfully formed and master node control plane is deploying applications/containers on worker nodes.\
\
\
\
\
# References\
\
 https://medium.com/geekculture/building-a-kubernetes-cluster-on-aws-from-scratch-7e1e8b0342c4\
\

\fs28 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf6 \cb7 \outl0\strokewidth0 \
\cf2 \cb1 \outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \strokec2 \
\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs32 \cf2 \cb1 \strokec2 \
\
\
\
\pard\pardeftab720\partightenfactor0

\f1\b\fs40 \cf2 \cb3 \strokec2 \
}